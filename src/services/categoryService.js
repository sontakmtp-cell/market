import { supabase } from '../lib/supabaseClient';

/**
 * Category Service - Qu·∫£n l√Ω c√°c danh m·ª•c ƒë·ªông
 */
export class CategoryService {
  /**
   * L·∫•y t·∫•t c·∫£ danh m·ª•c ƒëang ho·∫°t ƒë·ªông
   * @param {Object} options - T√πy ch·ªçn truy v·∫•n
   * @param {boolean} options.includeInactive - Bao g·ªìm danh m·ª•c kh√¥ng ho·∫°t ƒë·ªông
   * @param {number} options.parentId - L·ªçc theo danh m·ª•c cha
   * @returns {Promise<Array>} Danh s√°ch danh m·ª•c
   */
  static async getCategories(options = {}) {
    try {
      let query = supabase
        .from('categories')
        .select('*')
        .order('sort_order', { ascending: true });

      // Ch·ªâ l·∫•y danh m·ª•c ƒëang ho·∫°t ƒë·ªông tr·ª´ khi ƒë∆∞·ª£c y√™u c·∫ßu kh√°c
      if (!options.includeInactive) {
        query = query.eq('is_active', true);
      }

      // L·ªçc theo danh m·ª•c cha n·∫øu c√≥
      if (options.parentId !== undefined) {
        if (options.parentId === null) {
          query = query.is('parent_id', null);
        } else {
          query = query.eq('parent_id', options.parentId);
        }
      }

      const { data, error } = await query;

      if (error) {
        console.error('Error fetching categories:', error);
        throw new Error(`Failed to fetch categories: ${error.message}`);
      }

      return data || [];
    } catch (error) {
      console.error('CategoryService.getCategories error:', error);
      // Fallback to hardcoded categories if database fails
      return this.getFallbackCategories();
    }
  }

  /**
   * L·∫•y danh m·ª•c theo ID
   * @param {number} id - ID c·ªßa danh m·ª•c
   * @returns {Promise<Object|null>} Th√¥ng tin danh m·ª•c
   */
  static async getCategoryById(id) {
    try {
      const { data, error } = await supabase
        .from('categories')
        .select('*')
        .eq('id', id)
        .single();

      if (error) {
        console.error('Error fetching category by ID:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('CategoryService.getCategoryById error:', error);
      return null;
    }
  }

  /**
   * L·∫•y danh m·ª•c theo slug
   * @param {string} slug - Slug c·ªßa danh m·ª•c
   * @returns {Promise<Object|null>} Th√¥ng tin danh m·ª•c
   */
  static async getCategoryBySlug(slug) {
    try {
      const { data, error } = await supabase
        .from('categories')
        .select('*')
        .eq('slug', slug)
        .single();

      if (error) {
        console.error('Error fetching category by slug:', error);
        return null;
      }

      return data;
    } catch (error) {
      console.error('CategoryService.getCategoryBySlug error:', error);
      return null;
    }
  }

  /**
   * L·∫•y danh m·ª•c con c·ªßa m·ªôt danh m·ª•c cha
   * @param {number} parentId - ID c·ªßa danh m·ª•c cha
   * @returns {Promise<Array>} Danh s√°ch danh m·ª•c con
   */
  static async getSubCategories(parentId) {
    try {
      return await this.getCategories({ parentId });
    } catch (error) {
      console.error('CategoryService.getSubCategories error:', error);
      return [];
    }
  }

  /**
   * L·∫•y c√¢y danh m·ª•c ƒë·∫ßy ƒë·ªß (cha v√† con)
   * @returns {Promise<Array>} C√¢y danh m·ª•c
   */
  static async getCategoryTree() {
    try {
      const allCategories = await this.getCategories({ includeInactive: false });
      
      // T·∫°o map ƒë·ªÉ tra c·ª©u nhanh
      const categoryMap = new Map();
      allCategories.forEach(cat => {
        categoryMap.set(cat.id, { ...cat, children: [] });
      });

      // X√¢y d·ª±ng c√¢y
      const rootCategories = [];
      categoryMap.forEach(category => {
        if (category.parent_id) {
          const parent = categoryMap.get(category.parent_id);
          if (parent) {
            parent.children.push(category);
          }
        } else {
          rootCategories.push(category);
        }
      });

      return rootCategories;
    } catch (error) {
      console.error('CategoryService.getCategoryTree error:', error);
      return [];
    }
  }

  /**
   * T√¨m ki·∫øm danh m·ª•c theo t√™n
   * @param {string} searchTerm - T·ª´ kh√≥a t√¨m ki·∫øm
   * @returns {Promise<Array>} Danh s√°ch danh m·ª•c ph√π h·ª£p
   */
  static async searchCategories(searchTerm) {
    try {
      if (!searchTerm || searchTerm.trim() === '') {
        return await this.getCategories();
      }

      const { data, error } = await supabase
        .from('categories')
        .select('*')
        .eq('is_active', true)
        .or(`name.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%`)
        .order('sort_order', { ascending: true });

      if (error) {
        console.error('Error searching categories:', error);
        throw new Error(`Failed to search categories: ${error.message}`);
      }

      return data || [];
    } catch (error) {
      console.error('CategoryService.searchCategories error:', error);
      return [];
    }
  }

  /**
   * L·∫•y danh m·ª•c c·ªßa m·ªôt d·ª± √°n
   * @param {number} projectId - ID c·ªßa d·ª± √°n
   * @returns {Promise<Array>} Danh s√°ch danh m·ª•c c·ªßa d·ª± √°n
   */
  static async getProjectCategories(projectId) {
    try {
      const { data, error } = await supabase
        .from('categories_projects')
        .select(`
          category_id,
          categories (
            id,
            name,
            slug,
            description,
            icon,
            color
          )
        `)
        .eq('project_id', projectId);

      if (error) {
        console.error('Error fetching project categories:', error);
        return [];
      }

      return data?.map(item => item.categories) || [];
    } catch (error) {
      console.error('CategoryService.getProjectCategories error:', error);
      return [];
    }
  }

  /**
   * C·∫≠p nh·∫≠t danh m·ª•c cho d·ª± √°n
   * @param {number} projectId - ID c·ªßa d·ª± √°n
   * @param {Array<number>} categoryIds - Danh s√°ch ID danh m·ª•c
   * @returns {Promise<boolean>} K·∫øt qu·∫£ c·∫≠p nh·∫≠t
   */
  static async updateProjectCategories(projectId, categoryIds = []) {
    try {
      // X√≥a t·∫•t c·∫£ danh m·ª•c c≈© c·ªßa d·ª± √°n
      const { error: deleteError } = await supabase
        .from('categories_projects')
        .delete()
        .eq('project_id', projectId);

      if (deleteError) {
        console.error('Error deleting old project categories:', deleteError);
        throw new Error(`Failed to delete old categories: ${deleteError.message}`);
      }

      // Th√™m danh m·ª•c m·ªõi n·∫øu c√≥
      if (categoryIds.length > 0) {
        const categoriesData = categoryIds.map(categoryId => ({
          project_id: projectId,
          category_id: categoryId
        }));

        const { error: insertError } = await supabase
          .from('categories_projects')
          .insert(categoriesData);

        if (insertError) {
          console.error('Error inserting new project categories:', insertError);
          throw new Error(`Failed to insert new categories: ${insertError.message}`);
        }
      }

      return true;
    } catch (error) {
      console.error('CategoryService.updateProjectCategories error:', error);
      return false;
    }
  }

  /**
   * Chuy·ªÉn ƒë·ªïi danh m·ª•c t·ª´ format database sang format UI
   * @param {Array} categories - Danh s√°ch danh m·ª•c t·ª´ database
   * @returns {Array} Danh s√°ch danh m·ª•c cho UI
   */
  static formatCategoriesForUI(categories) {
    return categories.map(category => ({
      value: category.slug,
      label: category.name,
      description: category.description,
      icon: category.icon,
      color: category.color,
      id: category.id
    }));
  }

  /**
   * Danh m·ª•c d·ª± ph√≤ng khi kh√¥ng th·ªÉ k·∫øt n·ªëi database
   * @returns {Array} Danh s√°ch danh m·ª•c hard-coded
   */
  static getFallbackCategories() {
    return [
      { id: 1, name: 'K·∫øt c·∫•u x√¢y d·ª±ng', slug: 'structural', icon: 'üèóÔ∏è', color: '#3B82F6' },
      { id: 2, name: 'C∆° kh√≠', slug: 'mechanical', icon: '‚öôÔ∏è', color: '#10B981' },
      { id: 3, name: 'ƒêi·ªán t·ª≠', slug: 'electronic', icon: '‚ö°', color: '#F59E0B' },
      { id: 4, name: 'C·∫ßn c·∫©u', slug: 'crane', icon: 'üèóÔ∏è', color: '#EF4444' },
      { id: 5, name: 'Ki·∫øn tr√∫c', slug: 'architecture', icon: 'üèõÔ∏è', color: '#8B5CF6' },
      { id: 6, name: 'Ph√°t tri·ªÉn ph·∫ßn m·ªÅm', slug: 'software_dev', icon: 'üíª', color: '#06B6D4' },
      { id: 7, name: 'L·∫≠p tr√¨nh Web', slug: 'web_dev', icon: 'üåê', color: '#14B8A6' },
      { id: 8, name: '·ª®ng d·ª•ng di ƒë·ªông', slug: 'mobile_app', icon: 'üì±', color: '#F97316' },
      { id: 9, name: 'Khoa h·ªçc d·ªØ li·ªáu', slug: 'data_science', icon: 'üìä', color: '#6366F1' },
      { id: 10, name: 'Tr√≠ tu·ªá nh√¢n t·∫°o & Machine Learning', slug: 'ai_ml', icon: 'ü§ñ', color: '#EC4899' },
      { id: 11, name: 'Thi·∫øt k·∫ø UI/UX', slug: 'ui_ux', icon: 'üé®', color: '#84CC16' },
      { id: 12, name: 'Thi·∫øt k·∫ø ƒë·ªì h·ªça', slug: 'graphic_design', icon: 'üé≠', color: '#F43F5E' },
      { id: 13, name: 'Vi·∫øt n·ªôi dung', slug: 'content_writing', icon: '‚úçÔ∏è', color: '#8B5CF6' },
      { id: 14, name: 'Bi√™n d·ªãch/Th√¥ng d·ªãch', slug: 'translation', icon: 'üåç', color: '#0EA5E9' },
      { id: 15, name: 'Ti·∫øp th·ªã s·ªë (Digital Marketing)', slug: 'digital_marketing', icon: 'üìà', color: '#F59E0B' },
      { id: 16, name: 'SEO/SEM', slug: 'seo_sem', icon: 'üîç', color: '#10B981' },
      { id: 17, name: 'K·∫ø to√°n/T√†i ch√≠nh', slug: 'accounting_finance', icon: 'üí∞', color: '#059669' },
      { id: 18, name: 'Ph√°p l√Ω', slug: 'legal', icon: '‚öñÔ∏è', color: '#374151' },
      { id: 19, name: 'Nh√¢n s·ª±/Tuy·ªÉn d·ª•ng', slug: 'hr_recruitment', icon: 'üë•', color: '#7C3AED' },
      { id: 20, name: 'Kinh doanh/Ph√°t tri·ªÉn th·ªã tr∆∞·ªùng', slug: 'sales_bd', icon: 'üìä', color: '#DC2626' },
      { id: 21, name: 'Gi√°o d·ª•c/ƒê√†o t·∫°o', slug: 'education_training', icon: 'üéì', color: '#2563EB' },
      { id: 22, name: 'Y t·∫ø/ChƒÉm s√≥c s·ª©c kh·ªèe', slug: 'healthcare_medical', icon: 'üè•', color: '#059669' },
      { id: 23, name: 'S·∫£n xu·∫•t/C∆° kh√≠ ch·∫ø t·∫°o', slug: 'manufacturing', icon: 'üè≠', color: '#6B7280' },
      { id: 24, name: 'Logistics/Chu·ªói cung ·ª©ng', slug: 'logistics_supply', icon: 'üöõ', color: '#F97316' },
      { id: 25, name: 'Th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠', slug: 'e_commerce', icon: 'üõí', color: '#8B5CF6' },
      { id: 26, name: 'Kh√°c', slug: 'other', icon: 'üìù', color: '#6B7280' }
    ];
  }

  /**
   * T·∫°o danh m·ª•c m·ªõi (admin only)
   * @param {Object} categoryData - D·ªØ li·ªáu danh m·ª•c m·ªõi
   * @returns {Promise<Object|null>} Danh m·ª•c ƒë∆∞·ª£c t·∫°o
   */
  static async createCategory(categoryData) {
    try {
      const { data, error } = await supabase
        .from('categories')
        .insert([categoryData])
        .select()
        .single();

      if (error) {
        console.error('Error creating category:', error);
        throw new Error(`Failed to create category: ${error.message}`);
      }

      return data;
    } catch (error) {
      console.error('CategoryService.createCategory error:', error);
      return null;
    }
  }

  /**
   * C·∫≠p nh·∫≠t danh m·ª•c (admin only)
   * @param {number} id - ID danh m·ª•c
   * @param {Object} updateData - D·ªØ li·ªáu c·∫≠p nh·∫≠t
   * @returns {Promise<Object|null>} Danh m·ª•c ƒë√£ c·∫≠p nh·∫≠t
   */
  static async updateCategory(id, updateData) {
    try {
      const { data, error } = await supabase
        .from('categories')
        .update(updateData)
        .eq('id', id)
        .select()
        .single();

      if (error) {
        console.error('Error updating category:', error);
        throw new Error(`Failed to update category: ${error.message}`);
      }

      return data;
    } catch (error) {
      console.error('CategoryService.updateCategory error:', error);
      return null;
    }
  }

  /**
   * X√≥a danh m·ª•c (admin only)
   * @param {number} id - ID danh m·ª•c
   * @returns {Promise<boolean>} K·∫øt qu·∫£ x√≥a
   */
  static async deleteCategory(id) {
    try {
      const { error } = await supabase
        .from('categories')
        .delete()
        .eq('id', id);

      if (error) {
        console.error('Error deleting category:', error);
        throw new Error(`Failed to delete category: ${error.message}`);
      }

      return true;
    } catch (error) {
      console.error('CategoryService.deleteCategory error:', error);
      return false;
    }
  }
}

// Export default cho compatibility
export default CategoryService;
