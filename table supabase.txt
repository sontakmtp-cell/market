-- =========== BẢNG 1: PROFILES (Lưu thông tin người dùng) ===========
-- Bảng này sẽ lưu trữ thông tin chi tiết của mỗi người dùng,
-- liên kết trực tiếp với hệ thống quản lý tài khoản (auth) của Supabase.

CREATE TABLE public.profiles (
  id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  updated_at timestamptz,
  username text UNIQUE,
  display_name text,
  avatar_url text,
  cover_image_url text,
  bio text,
  location text,
  languages text[],
  phone text,
  social_links jsonb,
  visibility jsonb,
  role_profiles jsonb
);

-- Bật Row Level Security (RLS) cho bảng profiles để bảo mật
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;


-- =========== BẢNG 2: RECRUITMENT_JOBS (Lưu tin tuyển dụng) ===========
-- Dựa theo cấu trúc trong dataStore.js (hàm saveRecruitmentJob).

CREATE TABLE public.recruitment_jobs (
  id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz,
  user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
  title text,
  department text,
  location text,
  "locationType" text,
  "employmentType" text,
  "experienceLevel" text,
  description text,
  responsibilities text,
  requirements text,
  skills text[],
  certifications text[],
  "salaryMin" bigint,
  "salaryMax" bigint,
  currency text DEFAULT 'VND',
  "showSalary" boolean DEFAULT false,
  benefits text[],
  "contractTerms" text,
  "applicationDeadline" timestamptz,
  "screeningQuestions" jsonb,
  "autoResponse" boolean DEFAULT false,
  "responseTemplate" text,
  attachments jsonb[],
  "companyMaterials" jsonb[],
  status text DEFAULT 'active'
);

-- Bật Row Level Security (RLS) cho bảng recruitment_jobs
ALTER TABLE public.recruitment_jobs ENABLE ROW LEVEL SECURITY;


-- =========== BẢNG 3: MARKETPLACE_PROJECTS (Lưu dự án freelance) ===========
-- Dựa theo cấu trúc trong dataStore.js (hàm saveProject).

CREATE TABLE public.marketplace_projects (
  id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz,
  client_user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
  title text NOT NULL,
  "shortDescription" text,
  "fullDescription" text,
  category text,
  skills text[],
  "budgetMin" bigint,
  "budgetMax" bigint,
  currency text DEFAULT 'VND',
  duration text,
  deadline timestamptz,
  "isUrgent" boolean DEFAULT false,
  location text,
  attachments jsonb[],
  objectives jsonb[],
  "technicalRequirements" jsonb[],
  deliverables jsonb[],
  client jsonb,
  "proposalCount" integer DEFAULT 0,
  status text DEFAULT 'active'
);

-- Bật Row Level Security (RLS) cho bảng marketplace_projects
ALTER TABLE public.marketplace_projects ENABLE ROW LEVEL SECURITY;


-- =========== BẢNG 4: APPLICATIONS (Lưu đơn ứng tuyển) ===========
-- Bảng này sẽ lưu trữ các đơn ứng tuyển cho các vị trí tuyển dụng

CREATE TABLE public.applications (
  id bigint PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz,
  "jobId" bigint REFERENCES public.recruitment_jobs(id) ON DELETE CASCADE,
  user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
  "fullName" text,
  email text,
  phone text,
  address text,
  linkedin text,
  github text,
  portfolio text,
  summary text,
  "technicalSkills" jsonb,
  certifications text[],
  "experienceLevel" text,
  cv jsonb,
  "coverLetter" text,
  "portfolioFile" jsonb,
  certificates jsonb[],
  "customAnswers" jsonb,
  "applicationDate" timestamptz DEFAULT now(),
  status text DEFAULT 'submitted'
);

-- Bật Row Level Security (RLS) cho bảng applications
ALTER TABLE public.applications ENABLE ROW LEVEL SECURITY;


-- =========== TỰ ĐỘNG HÓA: TẠO PROFILE KHI CÓ USER MỚI ===========
-- 1. Tạo Function (bản hướng dẫn)
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, username, display_name)
  values (new.id, new.raw_user_meta_data->>'username', new.raw_user_meta_data->>'full_name');
  return new;
end;
$$;

-- 2. Tạo Trigger (công tắc cảm biến)
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- =========== RLS POLICIES (Bảo mật hàng) ===========

-- Policies cho bảng profiles
CREATE POLICY "Users can view public profiles" ON public.profiles
  FOR SELECT USING (true);

CREATE POLICY "Users can update own profile" ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can insert own profile" ON public.profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

-- Policies cho bảng recruitment_jobs
CREATE POLICY "Anyone can view active recruitment jobs" ON public.recruitment_jobs
  FOR SELECT USING (status = 'active');

CREATE POLICY "Users can create recruitment jobs" ON public.recruitment_jobs
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own recruitment jobs" ON public.recruitment_jobs
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own recruitment jobs" ON public.recruitment_jobs
  FOR DELETE USING (auth.uid() = user_id);

-- Policies cho bảng marketplace_projects
CREATE POLICY "Anyone can view active projects" ON public.marketplace_projects
  FOR SELECT USING (status = 'active');

CREATE POLICY "Users can create projects" ON public.marketplace_projects
  FOR INSERT WITH CHECK (auth.uid() = client_user_id);

CREATE POLICY "Users can update own projects" ON public.marketplace_projects
  FOR UPDATE USING (auth.uid() = client_user_id);

CREATE POLICY "Users can delete own projects" ON public.marketplace_projects
  FOR DELETE USING (auth.uid() = client_user_id);

-- Policies cho bảng applications
CREATE POLICY "Users can view applications for their jobs" ON public.applications
  FOR SELECT USING (
    EXISTS (
      SELECT 1 FROM public.recruitment_jobs 
      WHERE recruitment_jobs.id = applications."jobId" 
      AND recruitment_jobs.user_id = auth.uid()
    )
    OR auth.uid() = user_id
  );

CREATE POLICY "Users can create applications" ON public.applications
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own applications" ON public.applications
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Job owners can update application status" ON public.applications
  FOR UPDATE USING (
    EXISTS (
      SELECT 1 FROM public.recruitment_jobs 
      WHERE recruitment_jobs.id = applications."jobId" 
      AND recruitment_jobs.user_id = auth.uid()
    )
  );